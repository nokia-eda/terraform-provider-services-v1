// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_workflow_get_inputs_resp_elem

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func WorkflowGetInputsRespElemDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "name of the EdgePing",
				MarkdownDescription: "name of the EdgePing",
			},
			"namespace": schema.StringAttribute{
				Required:            true,
				Description:         "the namespace scope in which to operate",
				MarkdownDescription: "the namespace scope in which to operate",
			},
			"workflow_get_inputs_resp_elem": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"ack_prompt": schema.StringAttribute{
							Computed: true,
						},
						"group": schema.StringAttribute{
							Computed: true,
						},
						"kind": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"namespace": schema.StringAttribute{
							Computed: true,
						},
						"schema_prompt": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{},
							CustomType: SchemaPromptType{
								ObjectType: types.ObjectType{
									AttrTypes: SchemaPromptValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"version": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: WorkflowGetInputsRespElemType{
						ObjectType: types.ObjectType{
							AttrTypes: WorkflowGetInputsRespElemValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type WorkflowGetInputsRespElemModel struct {
	Name                      types.String `tfsdk:"name"`
	Namespace                 types.String `tfsdk:"namespace"`
	WorkflowGetInputsRespElem types.Set    `tfsdk:"workflow_get_inputs_resp_elem"`
}

var _ basetypes.ObjectTypable = WorkflowGetInputsRespElemType{}

type WorkflowGetInputsRespElemType struct {
	basetypes.ObjectType
}

func (t WorkflowGetInputsRespElemType) Equal(o attr.Type) bool {
	other, ok := o.(WorkflowGetInputsRespElemType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WorkflowGetInputsRespElemType) String() string {
	return "WorkflowGetInputsRespElemType"
}

func (t WorkflowGetInputsRespElemType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ackPromptAttribute, ok := attributes["ack_prompt"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ack_prompt is missing from object`)

		return nil, diags
	}

	ackPromptVal, ok := ackPromptAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ack_prompt expected to be basetypes.StringValue, was: %T`, ackPromptAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	schemaPromptAttribute, ok := attributes["schema_prompt"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_prompt is missing from object`)

		return nil, diags
	}

	schemaPromptVal, ok := schemaPromptAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_prompt expected to be basetypes.ObjectValue, was: %T`, schemaPromptAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WorkflowGetInputsRespElemValue{
		AckPrompt:    ackPromptVal,
		Group:        groupVal,
		Kind:         kindVal,
		Name:         nameVal,
		Namespace:    namespaceVal,
		SchemaPrompt: schemaPromptVal,
		Version:      versionVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewWorkflowGetInputsRespElemValueNull() WorkflowGetInputsRespElemValue {
	return WorkflowGetInputsRespElemValue{
		state: attr.ValueStateNull,
	}
}

func NewWorkflowGetInputsRespElemValueUnknown() WorkflowGetInputsRespElemValue {
	return WorkflowGetInputsRespElemValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWorkflowGetInputsRespElemValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WorkflowGetInputsRespElemValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WorkflowGetInputsRespElemValue Attribute Value",
				"While creating a WorkflowGetInputsRespElemValue value, a missing attribute value was detected. "+
					"A WorkflowGetInputsRespElemValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WorkflowGetInputsRespElemValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WorkflowGetInputsRespElemValue Attribute Type",
				"While creating a WorkflowGetInputsRespElemValue value, an invalid attribute value was detected. "+
					"A WorkflowGetInputsRespElemValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WorkflowGetInputsRespElemValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WorkflowGetInputsRespElemValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WorkflowGetInputsRespElemValue Attribute Value",
				"While creating a WorkflowGetInputsRespElemValue value, an extra attribute value was detected. "+
					"A WorkflowGetInputsRespElemValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WorkflowGetInputsRespElemValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWorkflowGetInputsRespElemValueUnknown(), diags
	}

	ackPromptAttribute, ok := attributes["ack_prompt"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ack_prompt is missing from object`)

		return NewWorkflowGetInputsRespElemValueUnknown(), diags
	}

	ackPromptVal, ok := ackPromptAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ack_prompt expected to be basetypes.StringValue, was: %T`, ackPromptAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewWorkflowGetInputsRespElemValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewWorkflowGetInputsRespElemValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewWorkflowGetInputsRespElemValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewWorkflowGetInputsRespElemValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	schemaPromptAttribute, ok := attributes["schema_prompt"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_prompt is missing from object`)

		return NewWorkflowGetInputsRespElemValueUnknown(), diags
	}

	schemaPromptVal, ok := schemaPromptAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_prompt expected to be basetypes.ObjectValue, was: %T`, schemaPromptAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewWorkflowGetInputsRespElemValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewWorkflowGetInputsRespElemValueUnknown(), diags
	}

	return WorkflowGetInputsRespElemValue{
		AckPrompt:    ackPromptVal,
		Group:        groupVal,
		Kind:         kindVal,
		Name:         nameVal,
		Namespace:    namespaceVal,
		SchemaPrompt: schemaPromptVal,
		Version:      versionVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewWorkflowGetInputsRespElemValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WorkflowGetInputsRespElemValue {
	object, diags := NewWorkflowGetInputsRespElemValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWorkflowGetInputsRespElemValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WorkflowGetInputsRespElemType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWorkflowGetInputsRespElemValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWorkflowGetInputsRespElemValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWorkflowGetInputsRespElemValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWorkflowGetInputsRespElemValueMust(WorkflowGetInputsRespElemValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WorkflowGetInputsRespElemType) ValueType(ctx context.Context) attr.Value {
	return WorkflowGetInputsRespElemValue{}
}

var _ basetypes.ObjectValuable = WorkflowGetInputsRespElemValue{}

type WorkflowGetInputsRespElemValue struct {
	AckPrompt    basetypes.StringValue `tfsdk:"ack_prompt"`
	Group        basetypes.StringValue `tfsdk:"group"`
	Kind         basetypes.StringValue `tfsdk:"kind"`
	Name         basetypes.StringValue `tfsdk:"name"`
	Namespace    basetypes.StringValue `tfsdk:"namespace"`
	SchemaPrompt basetypes.ObjectValue `tfsdk:"schema_prompt"`
	Version      basetypes.StringValue `tfsdk:"version"`
	state        attr.ValueState
}

func (v WorkflowGetInputsRespElemValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["ack_prompt"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["schema_prompt"] = basetypes.ObjectType{
		AttrTypes: SchemaPromptValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.AckPrompt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ack_prompt"] = val

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		val, err = v.SchemaPrompt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["schema_prompt"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WorkflowGetInputsRespElemValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WorkflowGetInputsRespElemValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WorkflowGetInputsRespElemValue) String() string {
	return "WorkflowGetInputsRespElemValue"
}

func (v WorkflowGetInputsRespElemValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var schemaPrompt basetypes.ObjectValue

	if v.SchemaPrompt.IsNull() {
		schemaPrompt = types.ObjectNull(
			SchemaPromptValue{}.AttributeTypes(ctx),
		)
	}

	if v.SchemaPrompt.IsUnknown() {
		schemaPrompt = types.ObjectUnknown(
			SchemaPromptValue{}.AttributeTypes(ctx),
		)
	}

	if !v.SchemaPrompt.IsNull() && !v.SchemaPrompt.IsUnknown() {
		schemaPrompt = types.ObjectValueMust(
			SchemaPromptValue{}.AttributeTypes(ctx),
			v.SchemaPrompt.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"ack_prompt": basetypes.StringType{},
		"group":      basetypes.StringType{},
		"kind":       basetypes.StringType{},
		"name":       basetypes.StringType{},
		"namespace":  basetypes.StringType{},
		"schema_prompt": basetypes.ObjectType{
			AttrTypes: SchemaPromptValue{}.AttributeTypes(ctx),
		},
		"version": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ack_prompt":    v.AckPrompt,
			"group":         v.Group,
			"kind":          v.Kind,
			"name":          v.Name,
			"namespace":     v.Namespace,
			"schema_prompt": schemaPrompt,
			"version":       v.Version,
		})

	return objVal, diags
}

func (v WorkflowGetInputsRespElemValue) Equal(o attr.Value) bool {
	other, ok := o.(WorkflowGetInputsRespElemValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AckPrompt.Equal(other.AckPrompt) {
		return false
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	if !v.SchemaPrompt.Equal(other.SchemaPrompt) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v WorkflowGetInputsRespElemValue) Type(ctx context.Context) attr.Type {
	return WorkflowGetInputsRespElemType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WorkflowGetInputsRespElemValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ack_prompt": basetypes.StringType{},
		"group":      basetypes.StringType{},
		"kind":       basetypes.StringType{},
		"name":       basetypes.StringType{},
		"namespace":  basetypes.StringType{},
		"schema_prompt": basetypes.ObjectType{
			AttrTypes: SchemaPromptValue{}.AttributeTypes(ctx),
		},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SchemaPromptType{}

type SchemaPromptType struct {
	basetypes.ObjectType
}

func (t SchemaPromptType) Equal(o attr.Type) bool {
	other, ok := o.(SchemaPromptType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SchemaPromptType) String() string {
	return "SchemaPromptType"
}

func (t SchemaPromptType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return SchemaPromptValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSchemaPromptValueNull() SchemaPromptValue {
	return SchemaPromptValue{
		state: attr.ValueStateNull,
	}
}

func NewSchemaPromptValueUnknown() SchemaPromptValue {
	return SchemaPromptValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSchemaPromptValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SchemaPromptValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SchemaPromptValue Attribute Value",
				"While creating a SchemaPromptValue value, a missing attribute value was detected. "+
					"A SchemaPromptValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaPromptValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SchemaPromptValue Attribute Type",
				"While creating a SchemaPromptValue value, an invalid attribute value was detected. "+
					"A SchemaPromptValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaPromptValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SchemaPromptValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SchemaPromptValue Attribute Value",
				"While creating a SchemaPromptValue value, an extra attribute value was detected. "+
					"A SchemaPromptValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SchemaPromptValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSchemaPromptValueUnknown(), diags
	}

	if diags.HasError() {
		return NewSchemaPromptValueUnknown(), diags
	}

	return SchemaPromptValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSchemaPromptValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SchemaPromptValue {
	object, diags := NewSchemaPromptValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSchemaPromptValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SchemaPromptType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSchemaPromptValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSchemaPromptValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSchemaPromptValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSchemaPromptValueMust(SchemaPromptValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SchemaPromptType) ValueType(ctx context.Context) attr.Value {
	return SchemaPromptValue{}
}

var _ basetypes.ObjectValuable = SchemaPromptValue{}

type SchemaPromptValue struct {
	state attr.ValueState
}

func (v SchemaPromptValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SchemaPromptValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SchemaPromptValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SchemaPromptValue) String() string {
	return "SchemaPromptValue"
}

func (v SchemaPromptValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v SchemaPromptValue) Equal(o attr.Value) bool {
	other, ok := o.(SchemaPromptValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v SchemaPromptValue) Type(ctx context.Context) attr.Type {
	return SchemaPromptType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SchemaPromptValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
